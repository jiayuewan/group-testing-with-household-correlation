# Create a vector.
apple_colors <- c('green','green','yellow','red','red','red','green')
# Create a factor object.
factor_apple <- factor(apple_colors)
factor_apple
install.packages("quantmod")
libaray(quantmod)
library(quantmod)
getSymbols(c("XOM", "CVX"), from = "2010-01-01", to = "2018-6-30")
CVX
class(CVX)
head(CVX)
head(XOM
head(XOM)
head(XOM)
as.vector(XOM,6)
as.vector(XOM[,6])
as.vector(XOM[,6]).shape
size(as.vector(XOM[,6]))
length(as.vector(XOM[,6]))
plot(1:10, sample(1:10,10), pch=3)
plot(1:10, sample(1:10,10), pch=3, type="l")
plot(1:10, sample(1:10,10), pch=3, type="p")
getSymbols(c("GOOGL", "AMZN"), from = "2010-01-01", to = "2018-06-30")
GOOGL_price <- as.vector(GOOGL[, 6])
AMZN_price <- as.vector(AMZN[, 6])
Data <- data.frame(cbind(GOOGL_price, AMZN_price))
ts.plot(Data, type = "l", lty = c("solid", "dashed"))
ts.plot(Data, type = "l", lty = c("solid", "dotted"))
plot(1:10, legend="dfa")
plot(1:10)
legend("test")
plot(1:10, 2:12)
plot(1:10, 2:11)
legend("test")
legend(legend='d')
ambulance <- read.csv("ambulance.csv")
number_noncancel<-length(which(ambulance$Precancel_Dur==-1))
number_call<-length(ambulance$Precancel_Dur)
per_cancell<-1-number_noncancel/number_call
print( c("Fraction of the calls are cancelled:", per_cancell))
ambulance
head(ambulance)
subset(ambulance, Time_Arrive_Hosp==-1)
ambulance[ambulance$Precancel_Dur==-1]
ambulance[ambulance$Precancel_Dur==-1,]
?dhyper
dhyper(2, 4, 48, 5)
qhyper(0.2, 4, 48, 5)
qhyper(0.9, 4, 48, 5)
qhyper(1, 4, 48, 5)
qhyper(0.999, 4, 48, 5)
sum(dhyper(c(2,3,4),4,48,5))
phyper(1,48,5)
phyper(1,4, 48,5)
1-phyper(1,4, 48,5)
?phyper
?pnorm
?pgamma
data <- readd.csv("fheights.txt", header=FALSE)
data <- read.csv("fheights.txt", header=FALSE)
data
data <- read.csv("fheights.txt", header=TRUE)
data
data[-1,]
install.packages("MASS")
library(MASS)
search()
objects(2)
MASS::survey
data("survey")
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
library(MASS)
qnorm(0)
q <- qnorm((0:9)/10, mean = 12, sd = 1)
q
plot(q, sort(rnorm(10, 12,1)))
getwd()
read.csv("failureTimes.txt")
install.packages("installr")
library(installr)
updateR()
updateR()
install.packages(c("BH", "cli", "curl", "digest", "evaluate", "fansi", "fitdistrplus", "glue", "highr", "hms", "htmltools", "jsonlite", "knitr", "markdown", "MASS", "mime", "pillar", "pkgconfig", "quantmod", "R6", "Rcpp", "readr", "rlang", "rmarkdown", "stringi", "stringr", "tibble", "tinytex", "TTR", "xfun", "xts", "yaml", "zoo"))
install.packages("mcmcpack")
install.packages("mcmcpack")
install.packages("MCMCpack")
install.packages("MCMCpack")
root <- "src/"
root
paste0(root, "core/dependency.R")
alpha.0
alpha.0 = 0.3
alpha.0
X =
sdf
distances <- matrix(1:25, nrow=5, ncol=5)
distance
distances
Y = c(1,1,1,1,1)
c
y
Y
X = matrix(1:25, nrow=5, ncol=5)
X
X[Y == 0, ]
nrow(X.1)
X1 = X[Y==0,]
X1
nrow(X1)
is.null(nrow(X1))
length(X1)
size(X1)
X1.size
dim(X1)
thetas = list()
thetas
thetas[[1]] = 0.5
thetas
thetas[[2]] = 0.5
thetas
dim(thetas)
thetas[1]
nrow
nrow=10
ncol=20
matrix(1, nrow, ncol)
ma = matrix(1, nrow, ncol)
ma
ma[,2]
l1 = ma[,2]
l2 = c(2,2,2,2,2,2,2,2,2,2)
l1*l2
l2 = c(2,2,2,2,2,2,2,2,10,32)
l1*l2
1:19
rep(-1, N)
N=10
rep(-1, N)
sort(c(0.2, 0.1, 0.8, 0.6))
install.packages("covidestim")
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("covidestim/covidestim")
d
d
test
library(binom)
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
setwd("~/GitHub/group-testing-with-household-correlation/src")
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
setwd("~/GitHub/group-testing-with-household-correlation/src")
df
df['Xbar'] <- df['numerator'] / df['niters']
df
?norm
?rnorm
qnorm(1)
qnorm(0.95)
qnorm(0.975)
qnorm(0.99995)
q <- 0.9999
z_score <- qnorm((1+q)/2)
q
z_score
sqrt(4)
df['L_Z'] <- df['Xbar'] - z_score * sqrt(df['Xbar'] * (1 - df['Xbar']) / df['niters'])
df
df['L_Z'] <- df['Xbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df['Zbar'] <- df['denominator'] / df['niters']
df['Xbar'] <- df['numerator'] / df['niters']
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Xbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df
library(binom)
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
df['Zbar'] <- df['denominator'] / df['niters']
df['Xbar'] <- df['numerator'] / df['niters']
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df
cases = c(59,1,5,0,0,0,15,20)
pops = c(10655, 3807, 108, 29, 85, 97, 407, 726)
for (i in c(1:8)) {
print(binom.confint(cases[i], pops[i], methods=c('exact')))
}
?binom.confint
print(binom.confint(cases[i], pops[i], methods=c('exact'))['lower'])
for (i in c(1:8)) {
print(binom.confint(cases[i], pops[i], methods=c('exact'))['lower'])
}
df['L_X'] <- binom.confint(df['niters'], df['numerator'], methods=c('exact'))['lower']
df['L_X'] <- binom.confint(df['numerator'], df['niters'], methods=c('exact'))['lower']
df
binom.confint(df['numerator'], df['niters'], methods=c('exact'))
df
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))['lower']
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))
lapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))[4]
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))[4,]
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))[5,]
df['L_X'] <- mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))[5,]
d
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact')))[5,]
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))[5,]
df['L_X'] <- mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))[5,]
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('cloglog'), SIMPLIFY=TRUE))[5,]
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('cloglog'), SIMPLIFY=TRUE))
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('wilson'), SIMPLIFY=TRUE))
mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))
sizeof(mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE)))
size(mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE)))
typeof(mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE)))
dd <- mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))
do.call(rbind, lapply(dd, as.data.frame))
do.call(rbind, rapply(dd, as.data.frame))
dd <- mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))
do.call(rbind, rapply(dd, as.data.frame))
dd <- mapply(binom.confint, df$numerator, df$niters, MoreArgs=list(methods=c('exact'), SIMPLIFY=TRUE))
do.call(rbind, lapply(dd, as.data.frame))
dd <- mapply(CI_exact_lower, df$numerator, df$niters, SIMPLIFY=TRUE))
dd <- mapply(CI_exact_lower, df$numerator, df$niters)
CI_exact_lower <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['lower'])
}
CI_exact_upper <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['upper'])
}
dd <- mapply(CI_exact_lower, df$numerator, df$niters)
dd
typeof(dd)
df['L_X'] <- mapply(CI_exact_lower, df$numerator, df$niters)
df['L_X'] <- unlist(mapply(CI_exact_lower, df$numerator, df$niters))
df
df['L_X'] <- unlist(mapply(CI_exact_lower, df$numerator, df$niters))
df
library(binom)
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
df['Zbar'] <- df['denominator'] / df['niters']
df['Xbar'] <- df['numerator'] / df['niters']
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df['U_Z'] <- df['Zbar'] + z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
CI_exact_lower <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['lower'])
}
df['L_X'] <- unlist(mapply(CI_exact_lower, df$numerator, df$niters))
df['L_X'] <- unlist(mapply(CI_exact_upper, df$numerator, df$niters))
CI_exact_upper <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['upper'])
}
df
library(binom)
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
df['Zbar'] <- df['denominator'] / df['niters']
df['Xbar'] <- df['numerator'] / df['niters']
z_score <- qnorm((1+q)/2)
q <- 0.9999
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df['U_Z'] <- df['Zbar'] + z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
CI_exact_lower <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['lower'])
}
CI_exact_upper <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['upper'])
}
df['U_X'] <- unlist(mapply(CI_exact_upper, df$numerator, df$niters))
df['L_X'] <- unlist(mapply(CI_exact_lower, df$numerator, df$niters))
source('~/GitHub/group-testing-with-household-correlation/src/CI_for_delta.R')
library(binom)
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
df['Zbar'] <- df['denominator'] / df['niters']
df['Xbar'] <- df['numerator'] / df['niters']
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df['U_Z'] <- df['Zbar'] + z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
CI_exact_lb <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['lower'])
}
CI_exact_ub <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['upper'])
}
df['L_X'] <- unlist(mapply(CI_exact_lb, df$numerator, df$niters))
df['U_X'] <- unlist(mapply(CI_exact_ub, df$numerator, df$niters))
df['delta_hat'] <- df['Xbar'] / df['Zbar']
df['delta_lb'] <- df['L_X'] / df['U_Z']
df['delta_ub'] <- df['U_X'] / df['L_Z']
df
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row_names=TRUE)
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row.names=TRUE)
format(df, digits=2, nsmall=3)
format(df, digits=3, nsmall=3)
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row.names=TRUE)
library(binom)
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
df['Xbar'] <- df['numerator'] / df['niters']
df['Zbar'] <- df['denominator'] / df['niters']
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df['U_Z'] <- df['Zbar'] + z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
CI_exact_lb <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['lower'])
}
CI_exact_ub <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['upper'])
}
df['L_X'] <- unlist(mapply(CI_exact_lb, df$numerator, df$niters))
df['U_X'] <- unlist(mapply(CI_exact_ub, df$numerator, df$niters))
df['delta_hat'] <- df['Xbar'] / df['Zbar']
df['delta_lb'] <- df['L_X'] / df['U_Z']
df['delta_ub'] <- df['U_X'] / df['L_Z']
format(df, digits=3, nsmall=3)
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row.names=TRUE)
library(binom)
setwd("~/GitHub/group-testing-with-household-correlation/src")
df <- read.csv(file='../results/PCR_tests/bounds_in_Theorem_2.csv')
df['Xbar'] <- df['numerator'] / df['niters']
df['Zbar'] <- df['denominator'] / df['niters']
q <- 0.9999
z_score <- qnorm((1+q)/2)
df['L_Z'] <- df['Zbar'] - z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
df['U_Z'] <- df['Zbar'] + z_score * sqrt(df['Zbar'] * (1 - df['Xbar']) / df['niters'])
CI_exact_lb <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['lower'])
}
CI_exact_ub <- function(x, n) {
return(binom.confint(x, n, methods=c('exact'))['upper'])
}
df['L_X'] <- unlist(mapply(CI_exact_lb, df$numerator, df$niters))
df['U_X'] <- unlist(mapply(CI_exact_ub, df$numerator, df$niters))
df['delta_hat'] <- df['Xbar'] / df['Zbar']
df['delta_lb'] <- df['L_X'] / df['U_Z']
df['delta_ub'] <- df['U_X'] / df['L_Z']
format(df, digits=3, nsmall=3)
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row.names=TRUE)
df = subset(df, select=c('pool.size', 'LoD', 'Xbar', 'Zbar', 'delta_hat', 'delta_lb', 'delta_ub'))
format(df, digits=3, nsmall=3)
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row.names=TRUE)
df
df = subset(df, select=c('pool.size', 'LoD', 'Xbar', 'Zbar', 'delta_hat', 'delta_lb', 'delta_ub'))
df = format(df, digits=3, nsmall=3)
write.csv(df, file='../results/PCR_tests/bounds_in_Theorem_2_with_CI.csv', row.names=TRUE)
